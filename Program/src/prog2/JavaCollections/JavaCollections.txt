Array:
Estructura de tamaño fijo
	EFICIENCIA:
	acceso por posición: coste temporal inmediato
	recorrido: lineal
	insercion/borrado: lineal
	cambio de tamaño: lineal

ArrayList(l): Array Dinámico
ArrayList<String> l = new ArrayList<String>();
	añadir:
	l.add("Hola") predeterminado: añade "hola" al final 
	l.add(0,"Hola"): añade hola en el indice introducido.
	l.addAll( Arrays.asList( p1, p2, p3 ) );

	editar:
	l.set(0,"Adios"): sobreescribe el elemento en el indice introducido con"Adios"

	eliminar:
	l.remove("Hola"): elimina el primer objeto que encuentre en la lista (l[i]) que cumpla l[i].equals("Hola")
	l.remove(2): elimina el elemento que se encuentra en el indice introducido.
	
	indice:
	l.indexOf("Adios"): devuelve el indice en el que se encuentra dicho elemento o -1 si está dentro de la lista.
	
	contieneA:
	l.contains("Hola"): comprueba por cada elemento de la lista( l[i] ) si es igual al objeto introducido,es decir, si l[i].equals("Hola") y devuelve la respuesta.
	interesante combinarlo con él método anterior:
	if (l.contains("Hola"))l.indexOf("Hola");

	ordenar:
	Collections.sort(l): ordena los elementos de la lista segun el compareTo() de su clase.	
	Comparator<Peli> comparador = new Comparador();
		Collections.sort( l, comparador): ordena los elementos (instancias de Peli) segun el comparador introducido que implementa la interfaz Comparator:
			public class Comparador implements Comparator<Peli> {
			@Override
			public int compare(Peli arg0, Peli arg1) {
			return -arg0.getNombre().compareTo( arg1.getNombre() ); //ordena alfabeticamente pero al revés.
			}
	l.sort( comparador): ordena la lista segun el comparador
	Collections.reverse( l ): da la vuelta a la lista
	Collections.shuffle( l ); desordena aleatoriamente

	intercambiar:
	Collections.swap( l, a, b ); intercambia el elemento en la posicion a por el elemento b  y viceversa dentro de la lista l.

	
	EFICIENCIA:
	acceso por posición: coste temporal inmediato
	recorrido: lineal
	insercion/borrado: lineal
	cambio de tamaño: lineal
	

LinkedList(l): Lista vinculada de nodos donde cada nodo tiene 3 referencias(valor,next y prev)
LinkedList<Object> l = new LinkedList<Object>();
	EFICIENCIA:
	insercion/borrado: directo
	acceso directo y recorrido: malisimo
	***usar solo cuando se accede en inicio y/o final -->se pueden convertir en pilas(insertar y borrar por el mismo sitio) o colas (lados opuestos)


Set(Conjunto sin repetición y sin índices)(l):
***hay que reprogramar hashcode() y equals() de la clase guardada con coherencia entre ellos.
TreeSet:
Conjunto ordenado en función del método CompareTo de la clase cuyas instancias se quieren guardar(en el caso de los Strings alfabeticamente porque asi es como lo establece la interfaz comparable con el metodo compareTo).
TreeSet<String> conjTree = new TreeSet<String>();
HashSet:
Conjunto no 0rdenado.
HashSet<String> conjHash = new HashSet<String>();

	añadir:
	l.add("Hola"): añade "Hola" si no esta en el Set.

	eliminar:
	l.remove("Hola"): elimina el  objeto que encuentra en el Set tal que o.equals("Hola"), solo va a haber uno.
	
	contieneA:
	l.contains("Hola"): comprueba por cada elemento del Set(o) si es igual al objeto introducido,es decir, si o.equals("Hola") y devuelve la respuesta.

	rec0rrer un Set:
	for (objeto :l){}

Mapa(diccionario clave-valor)(l):
Map<claseClave,claseValor> mapa...
***hay que reprogramar hashcode() y equals() de la clase que sirve de clave con coherencia entre ellos.
Mapa con claves ordenadas(poca utilidad a mi parecer):
TreeMap<String,String> mapaT = new TreeMap<>();
Mapa con clave no ordenadas:
HashMap<String,String> mapaH = new HashMap<>();
	
	añadir:
	mapaH.put(clave,valor );

	Comprobar si existe, si no se crea una clave:
	if (!mapa.containsKey(clave)) mapa.put(clave, new ArrayList<Partido>());
	mapa.get(clave).add(partido);

	consultar:
	mapaH.get(clave) devuelve el valor asociado a dicha clave y devuelve null si la clave no existe en el mapa
	mapaH.containsKey(clave) devuelve true si el mapa contiene la clave(mucho más eficiente que containsValue)
	mapaH.containsValue(valor) devuelve true si el mapa contiene el valor (no recomendable)
	
	eliminar:
	mapaH.remove( clave );
	
	recorrer:
	for (String clave : mapaT.keySet()) {
	}
	keySet() es un conjunto de todas las claves



















